// Mocks generated by Mockito 5.4.4 from annotations
// in habits_server/test/mocks/app_session_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:habits_server/src/app_session/app_session.dart' as _i8;
import 'package:habits_server/src/generated/protocol.dart' as _i6;
import 'package:habits_server/src/queries/queries.dart' as _i2;
import 'package:habits_server/src/utilities/utilities.dart' as _i3;
import 'package:habits_shared/habits_shared.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:serverpod/serverpod.dart' as _i4;
import 'package:serverpod_auth_server/serverpod_auth_server.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthKeyQueries_0 extends _i1.SmartFake
    implements _i2.AuthKeyQueries {
  _FakeAuthKeyQueries_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEmailAuthQueries_1 extends _i1.SmartFake
    implements _i2.EmailAuthQueries {
  _FakeEmailAuthQueries_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserInfoQueries_2 extends _i1.SmartFake
    implements _i2.UserInfoQueries {
  _FakeUserInfoQueries_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserQueries_3 extends _i1.SmartFake implements _i2.UserQueries {
  _FakeUserQueries_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeKeyValidator_4 extends _i1.SmartFake implements _i3.KeyValidator {
  _FakeKeyValidator_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSession_5 extends _i1.SmartFake implements _i4.Session {
  _FakeSession_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_6<T> extends _i1.SmartFake implements _i5.Future<T> {
  _FakeFuture_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_7 extends _i1.SmartFake implements _i6.User {
  _FakeUser_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthKey_8 extends _i1.SmartFake implements _i7.AuthKey {
  _FakeAuthKey_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEmailAuth_9 extends _i1.SmartFake implements _i7.EmailAuth {
  _FakeEmailAuth_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AppSession].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppSession extends _i1.Mock implements _i8.AppSession {
  @override
  Map<String, String> get passwords => (super.noSuchMethod(
        Invocation.getter(#passwords),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  String get authKeySalt => (super.noSuchMethod(
        Invocation.getter(#authKeySalt),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#authKeySalt),
        ),
        returnValueForMissingStub: _i9.dummyValue<String>(
          this,
          Invocation.getter(#authKeySalt),
        ),
      ) as String);

  @override
  _i5.Future<_i4.AuthenticationInfo?> get authenticated => (super.noSuchMethod(
        Invocation.getter(#authenticated),
        returnValue: _i5.Future<_i4.AuthenticationInfo?>.value(),
        returnValueForMissingStub: _i5.Future<_i4.AuthenticationInfo?>.value(),
      ) as _i5.Future<_i4.AuthenticationInfo?>);

  @override
  _i2.AuthKeyQueries get authKey => (super.noSuchMethod(
        Invocation.getter(#authKey),
        returnValue: _FakeAuthKeyQueries_0(
          this,
          Invocation.getter(#authKey),
        ),
        returnValueForMissingStub: _FakeAuthKeyQueries_0(
          this,
          Invocation.getter(#authKey),
        ),
      ) as _i2.AuthKeyQueries);

  @override
  _i2.EmailAuthQueries get emailAuth => (super.noSuchMethod(
        Invocation.getter(#emailAuth),
        returnValue: _FakeEmailAuthQueries_1(
          this,
          Invocation.getter(#emailAuth),
        ),
        returnValueForMissingStub: _FakeEmailAuthQueries_1(
          this,
          Invocation.getter(#emailAuth),
        ),
      ) as _i2.EmailAuthQueries);

  @override
  _i2.UserInfoQueries get userInfo => (super.noSuchMethod(
        Invocation.getter(#userInfo),
        returnValue: _FakeUserInfoQueries_2(
          this,
          Invocation.getter(#userInfo),
        ),
        returnValueForMissingStub: _FakeUserInfoQueries_2(
          this,
          Invocation.getter(#userInfo),
        ),
      ) as _i2.UserInfoQueries);

  @override
  _i2.UserQueries get user => (super.noSuchMethod(
        Invocation.getter(#user),
        returnValue: _FakeUserQueries_3(
          this,
          Invocation.getter(#user),
        ),
        returnValueForMissingStub: _FakeUserQueries_3(
          this,
          Invocation.getter(#user),
        ),
      ) as _i2.UserQueries);

  @override
  String hashString(String? value) => (super.noSuchMethod(
        Invocation.method(
          #hashString,
          [value],
        ),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.method(
            #hashString,
            [value],
          ),
        ),
        returnValueForMissingStub: _i9.dummyValue<String>(
          this,
          Invocation.method(
            #hashString,
            [value],
          ),
        ),
      ) as String);

  @override
  _i3.KeyValidator getKeyValidator(String? keyIdentifier) =>
      (super.noSuchMethod(
        Invocation.method(
          #getKeyValidator,
          [keyIdentifier],
        ),
        returnValue: _FakeKeyValidator_4(
          this,
          Invocation.method(
            #getKeyValidator,
            [keyIdentifier],
          ),
        ),
        returnValueForMissingStub: _FakeKeyValidator_4(
          this,
          Invocation.method(
            #getKeyValidator,
            [keyIdentifier],
          ),
        ),
      ) as _i3.KeyValidator);

  @override
  void log(
    String? message, {
    _i4.LogLevel? level,
    dynamic exception,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #log,
          [message],
          {
            #level: level,
            #exception: exception,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i4.Session> createSession({bool? enableLogging = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSession,
          [],
          {#enableLogging: enableLogging},
        ),
        returnValue: _i5.Future<_i4.Session>.value(_FakeSession_5(
          this,
          Invocation.method(
            #createSession,
            [],
            {#enableLogging: enableLogging},
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i4.Session>.value(_FakeSession_5(
          this,
          Invocation.method(
            #createSession,
            [],
            {#enableLogging: enableLogging},
          ),
        )),
      ) as _i5.Future<_i4.Session>);

  @override
  _i5.Future<R> transaction<R>(
          _i4.TransactionFunction<R>? transactionFunction) =>
      (super.noSuchMethod(
        Invocation.method(
          #transaction,
          [transactionFunction],
        ),
        returnValue: _i9.ifNotNull(
              _i9.dummyValueOrNull<R>(
                this,
                Invocation.method(
                  #transaction,
                  [transactionFunction],
                ),
              ),
              (R v) => _i5.Future<R>.value(v),
            ) ??
            _FakeFuture_6<R>(
              this,
              Invocation.method(
                #transaction,
                [transactionFunction],
              ),
            ),
        returnValueForMissingStub: _i9.ifNotNull(
              _i9.dummyValueOrNull<R>(
                this,
                Invocation.method(
                  #transaction,
                  [transactionFunction],
                ),
              ),
              (R v) => _i5.Future<R>.value(v),
            ) ??
            _FakeFuture_6<R>(
              this,
              Invocation.method(
                #transaction,
                [transactionFunction],
              ),
            ),
      ) as _i5.Future<R>);
}

/// A class which mocks [UserQueries].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserQueries extends _i1.Mock implements _i2.UserQueries {
  @override
  _i4.Session get session => (super.noSuchMethod(
        Invocation.getter(#session),
        returnValue: _FakeSession_5(
          this,
          Invocation.getter(#session),
        ),
        returnValueForMissingStub: _FakeSession_5(
          this,
          Invocation.getter(#session),
        ),
      ) as _i4.Session);

  @override
  _i5.Future<_i6.User?> insert(_i6.User? user) => (super.noSuchMethod(
        Invocation.method(
          #insert,
          [user],
        ),
        returnValue: _i5.Future<_i6.User?>.value(),
        returnValueForMissingStub: _i5.Future<_i6.User?>.value(),
      ) as _i5.Future<_i6.User?>);

  @override
  _i5.Future<_i6.User?> getByUid(String? uid) => (super.noSuchMethod(
        Invocation.method(
          #getByUid,
          [uid],
        ),
        returnValue: _i5.Future<_i6.User?>.value(),
        returnValueForMissingStub: _i5.Future<_i6.User?>.value(),
      ) as _i5.Future<_i6.User?>);

  @override
  _i5.Future<_i6.User?> getByUserInfoId(int? userInfoId) => (super.noSuchMethod(
        Invocation.method(
          #getByUserInfoId,
          [userInfoId],
        ),
        returnValue: _i5.Future<_i6.User?>.value(),
        returnValueForMissingStub: _i5.Future<_i6.User?>.value(),
      ) as _i5.Future<_i6.User?>);

  @override
  _i5.Future<_i6.User> update(_i10.User? user) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [user],
        ),
        returnValue: _i5.Future<_i6.User>.value(_FakeUser_7(
          this,
          Invocation.method(
            #update,
            [user],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i6.User>.value(_FakeUser_7(
          this,
          Invocation.method(
            #update,
            [user],
          ),
        )),
      ) as _i5.Future<_i6.User>);
}

/// A class which mocks [UserInfoQueries].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserInfoQueries extends _i1.Mock implements _i2.UserInfoQueries {
  @override
  _i4.Session get session => (super.noSuchMethod(
        Invocation.getter(#session),
        returnValue: _FakeSession_5(
          this,
          Invocation.getter(#session),
        ),
        returnValueForMissingStub: _FakeSession_5(
          this,
          Invocation.getter(#session),
        ),
      ) as _i4.Session);

  @override
  _i5.Future<_i7.UserInfo?> getByUserIdentifier(String? userIdentifier) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByUserIdentifier,
          [userIdentifier],
        ),
        returnValue: _i5.Future<_i7.UserInfo?>.value(),
        returnValueForMissingStub: _i5.Future<_i7.UserInfo?>.value(),
      ) as _i5.Future<_i7.UserInfo?>);

  @override
  _i5.Future<_i7.UserInfo?> getById(int? pk) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [pk],
        ),
        returnValue: _i5.Future<_i7.UserInfo?>.value(),
        returnValueForMissingStub: _i5.Future<_i7.UserInfo?>.value(),
      ) as _i5.Future<_i7.UserInfo?>);

  @override
  _i5.Future<_i7.UserInfo?> insert(
    _i7.UserInfo? userInfo, [
    String? authMethod,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [
            userInfo,
            authMethod,
          ],
        ),
        returnValue: _i5.Future<_i7.UserInfo?>.value(),
        returnValueForMissingStub: _i5.Future<_i7.UserInfo?>.value(),
      ) as _i5.Future<_i7.UserInfo?>);

  @override
  _i5.Future<void> setEmail(
    int? userInfoId,
    String? email, {
    _i4.Transaction? transaction,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setEmail,
          [
            userInfoId,
            email,
          ],
          {#transaction: transaction},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [AuthKeyQueries].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthKeyQueries extends _i1.Mock implements _i2.AuthKeyQueries {
  @override
  _i4.Session get session => (super.noSuchMethod(
        Invocation.getter(#session),
        returnValue: _FakeSession_5(
          this,
          Invocation.getter(#session),
        ),
        returnValueForMissingStub: _FakeSession_5(
          this,
          Invocation.getter(#session),
        ),
      ) as _i4.Session);

  @override
  _i5.Future<_i7.AuthKey> insert(
    _i7.AuthKey? key, {
    _i4.Transaction? transaction,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [key],
          {#transaction: transaction},
        ),
        returnValue: _i5.Future<_i7.AuthKey>.value(_FakeAuthKey_8(
          this,
          Invocation.method(
            #insert,
            [key],
            {#transaction: transaction},
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i7.AuthKey>.value(_FakeAuthKey_8(
          this,
          Invocation.method(
            #insert,
            [key],
            {#transaction: transaction},
          ),
        )),
      ) as _i5.Future<_i7.AuthKey>);

  @override
  _i5.Future<_i7.AuthKey?> getTypedKeyForUserId(
    int? userInfoId,
    dynamic type,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTypedKeyForUserId,
          [
            userInfoId,
            type,
          ],
        ),
        returnValue: _i5.Future<_i7.AuthKey?>.value(),
        returnValueForMissingStub: _i5.Future<_i7.AuthKey?>.value(),
      ) as _i5.Future<_i7.AuthKey?>);

  @override
  _i5.Future<_i7.AuthKey?> getById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i5.Future<_i7.AuthKey?>.value(),
        returnValueForMissingStub: _i5.Future<_i7.AuthKey?>.value(),
      ) as _i5.Future<_i7.AuthKey?>);

  @override
  _i5.Future<_i7.AuthKey?> delete(_i7.AuthKey? key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i5.Future<_i7.AuthKey?>.value(),
        returnValueForMissingStub: _i5.Future<_i7.AuthKey?>.value(),
      ) as _i5.Future<_i7.AuthKey?>);

  @override
  _i5.Future<void> deleteAnonymous(
    int? userInfoId, {
    _i4.Transaction? transaction,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAnonymous,
          [userInfoId],
          {#transaction: transaction},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i7.AuthKey>> getAllForUserId(int? userInfoId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllForUserId,
          [userInfoId],
        ),
        returnValue: _i5.Future<List<_i7.AuthKey>>.value(<_i7.AuthKey>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i7.AuthKey>>.value(<_i7.AuthKey>[]),
      ) as _i5.Future<List<_i7.AuthKey>>);
}

/// A class which mocks [EmailAuthQueries].
///
/// See the documentation for Mockito's code generation for more information.
class MockEmailAuthQueries extends _i1.Mock implements _i2.EmailAuthQueries {
  @override
  _i4.Session get session => (super.noSuchMethod(
        Invocation.getter(#session),
        returnValue: _FakeSession_5(
          this,
          Invocation.getter(#session),
        ),
        returnValueForMissingStub: _FakeSession_5(
          this,
          Invocation.getter(#session),
        ),
      ) as _i4.Session);

  @override
  _i5.Future<_i7.EmailAuth?> getByUserId(int? userInfoId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByUserId,
          [userInfoId],
        ),
        returnValue: _i5.Future<_i7.EmailAuth?>.value(),
        returnValueForMissingStub: _i5.Future<_i7.EmailAuth?>.value(),
      ) as _i5.Future<_i7.EmailAuth?>);

  @override
  _i5.Future<_i7.EmailAuth> insert(_i7.EmailAuth? emailAuth) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [emailAuth],
        ),
        returnValue: _i5.Future<_i7.EmailAuth>.value(_FakeEmailAuth_9(
          this,
          Invocation.method(
            #insert,
            [emailAuth],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i7.EmailAuth>.value(_FakeEmailAuth_9(
          this,
          Invocation.method(
            #insert,
            [emailAuth],
          ),
        )),
      ) as _i5.Future<_i7.EmailAuth>);

  @override
  _i5.Future<String> generatePasswordHash(String? password) =>
      (super.noSuchMethod(
        Invocation.method(
          #generatePasswordHash,
          [password],
        ),
        returnValue: _i5.Future<String>.value(_i9.dummyValue<String>(
          this,
          Invocation.method(
            #generatePasswordHash,
            [password],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<String>.value(_i9.dummyValue<String>(
          this,
          Invocation.method(
            #generatePasswordHash,
            [password],
          ),
        )),
      ) as _i5.Future<String>);
}

/// A class which mocks [KeyValidator].
///
/// See the documentation for Mockito's code generation for more information.
class MockKeyValidator extends _i1.Mock implements _i3.KeyValidator {
  @override
  String get keyIdentifier => (super.noSuchMethod(
        Invocation.getter(#keyIdentifier),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#keyIdentifier),
        ),
        returnValueForMissingStub: _i9.dummyValue<String>(
          this,
          Invocation.getter(#keyIdentifier),
        ),
      ) as String);

  @override
  set log(String? _log) => super.noSuchMethod(
        Invocation.setter(
          #log,
          _log,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get keyId => (super.noSuchMethod(
        Invocation.getter(#keyId),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  String get key => (super.noSuchMethod(
        Invocation.getter(#key),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#key),
        ),
        returnValueForMissingStub: _i9.dummyValue<String>(
          this,
          Invocation.getter(#key),
        ),
      ) as String);
}

/// A class which mocks [AuthenticationInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationInfo extends _i1.Mock
    implements _i4.AuthenticationInfo {
  @override
  int get userId => (super.noSuchMethod(
        Invocation.getter(#userId),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  Set<_i4.Scope> get scopes => (super.noSuchMethod(
        Invocation.getter(#scopes),
        returnValue: <_i4.Scope>{},
        returnValueForMissingStub: <_i4.Scope>{},
      ) as Set<_i4.Scope>);
}

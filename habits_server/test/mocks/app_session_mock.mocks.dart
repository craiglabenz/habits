// Mocks generated by Mockito 5.4.4 from annotations
// in habits_server/test/mocks/app_session_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:habits_server/src/app_session/app_session.dart' as _i5;
import 'package:habits_server/src/generated/protocol.dart' as _i4;
import 'package:habits_server/src/queries/queries.dart' as _i2;
import 'package:habits_shared/habits_shared.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:serverpod/serverpod.dart' as _i3;
import 'package:serverpod_auth_server/serverpod_auth_server.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthKeyQueries_0 extends _i1.SmartFake
    implements _i2.AuthKeyQueries {
  _FakeAuthKeyQueries_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserInfoQueries_1 extends _i1.SmartFake
    implements _i2.UserInfoQueries {
  _FakeUserInfoQueries_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserQueries_2 extends _i1.SmartFake implements _i2.UserQueries {
  _FakeUserQueries_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSession_3 extends _i1.SmartFake implements _i3.Session {
  _FakeSession_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_4 extends _i1.SmartFake implements _i4.User {
  _FakeUser_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AppSession].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppSession extends _i1.Mock implements _i5.AppSession {
  @override
  Map<String, String> get passwords => (super.noSuchMethod(
        Invocation.getter(#passwords),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  _i2.AuthKeyQueries get authKey => (super.noSuchMethod(
        Invocation.getter(#authKey),
        returnValue: _FakeAuthKeyQueries_0(
          this,
          Invocation.getter(#authKey),
        ),
        returnValueForMissingStub: _FakeAuthKeyQueries_0(
          this,
          Invocation.getter(#authKey),
        ),
      ) as _i2.AuthKeyQueries);

  @override
  _i2.UserInfoQueries get userInfo => (super.noSuchMethod(
        Invocation.getter(#userInfo),
        returnValue: _FakeUserInfoQueries_1(
          this,
          Invocation.getter(#userInfo),
        ),
        returnValueForMissingStub: _FakeUserInfoQueries_1(
          this,
          Invocation.getter(#userInfo),
        ),
      ) as _i2.UserInfoQueries);

  @override
  _i2.UserQueries get user => (super.noSuchMethod(
        Invocation.getter(#user),
        returnValue: _FakeUserQueries_2(
          this,
          Invocation.getter(#user),
        ),
        returnValueForMissingStub: _FakeUserQueries_2(
          this,
          Invocation.getter(#user),
        ),
      ) as _i2.UserQueries);

  @override
  void log(
    String? message, {
    _i3.LogLevel? level,
    dynamic exception,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #log,
          [message],
          {
            #level: level,
            #exception: exception,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i3.Session> createSession({bool? enableLogging = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSession,
          [],
          {#enableLogging: enableLogging},
        ),
        returnValue: _i6.Future<_i3.Session>.value(_FakeSession_3(
          this,
          Invocation.method(
            #createSession,
            [],
            {#enableLogging: enableLogging},
          ),
        )),
        returnValueForMissingStub: _i6.Future<_i3.Session>.value(_FakeSession_3(
          this,
          Invocation.method(
            #createSession,
            [],
            {#enableLogging: enableLogging},
          ),
        )),
      ) as _i6.Future<_i3.Session>);
}

/// A class which mocks [UserQueries].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserQueries extends _i1.Mock implements _i2.UserQueries {
  @override
  _i3.Session get session => (super.noSuchMethod(
        Invocation.getter(#session),
        returnValue: _FakeSession_3(
          this,
          Invocation.getter(#session),
        ),
        returnValueForMissingStub: _FakeSession_3(
          this,
          Invocation.getter(#session),
        ),
      ) as _i3.Session);

  @override
  _i6.Future<_i4.User?> insert(_i4.User? user) => (super.noSuchMethod(
        Invocation.method(
          #insert,
          [user],
        ),
        returnValue: _i6.Future<_i4.User?>.value(),
        returnValueForMissingStub: _i6.Future<_i4.User?>.value(),
      ) as _i6.Future<_i4.User?>);

  @override
  _i6.Future<_i4.User?> getByUid(String? uid) => (super.noSuchMethod(
        Invocation.method(
          #getByUid,
          [uid],
        ),
        returnValue: _i6.Future<_i4.User?>.value(),
        returnValueForMissingStub: _i6.Future<_i4.User?>.value(),
      ) as _i6.Future<_i4.User?>);

  @override
  _i6.Future<_i4.User?> getByUserInfoId(int? userInfoId) => (super.noSuchMethod(
        Invocation.method(
          #getByUserInfoId,
          [userInfoId],
        ),
        returnValue: _i6.Future<_i4.User?>.value(),
        returnValueForMissingStub: _i6.Future<_i4.User?>.value(),
      ) as _i6.Future<_i4.User?>);

  @override
  _i6.Future<_i4.User> update(_i7.User? user) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [user],
        ),
        returnValue: _i6.Future<_i4.User>.value(_FakeUser_4(
          this,
          Invocation.method(
            #update,
            [user],
          ),
        )),
        returnValueForMissingStub: _i6.Future<_i4.User>.value(_FakeUser_4(
          this,
          Invocation.method(
            #update,
            [user],
          ),
        )),
      ) as _i6.Future<_i4.User>);

  @override
  _i6.Future<_i4.User?> getForSession() => (super.noSuchMethod(
        Invocation.method(
          #getForSession,
          [],
        ),
        returnValue: _i6.Future<_i4.User?>.value(),
        returnValueForMissingStub: _i6.Future<_i4.User?>.value(),
      ) as _i6.Future<_i4.User?>);
}

/// A class which mocks [UserInfoQueries].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserInfoQueries extends _i1.Mock implements _i2.UserInfoQueries {
  @override
  _i3.Session get session => (super.noSuchMethod(
        Invocation.getter(#session),
        returnValue: _FakeSession_3(
          this,
          Invocation.getter(#session),
        ),
        returnValueForMissingStub: _FakeSession_3(
          this,
          Invocation.getter(#session),
        ),
      ) as _i3.Session);

  @override
  _i6.Future<_i8.UserInfo?> getByUserIdentifier(String? userIdentifier) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByUserIdentifier,
          [userIdentifier],
        ),
        returnValue: _i6.Future<_i8.UserInfo?>.value(),
        returnValueForMissingStub: _i6.Future<_i8.UserInfo?>.value(),
      ) as _i6.Future<_i8.UserInfo?>);

  @override
  _i6.Future<_i8.UserInfo?> getById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i6.Future<_i8.UserInfo?>.value(),
        returnValueForMissingStub: _i6.Future<_i8.UserInfo?>.value(),
      ) as _i6.Future<_i8.UserInfo?>);

  @override
  _i6.Future<_i8.UserInfo?> insert(
    _i8.UserInfo? userInfo, [
    String? authMethod,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [
            userInfo,
            authMethod,
          ],
        ),
        returnValue: _i6.Future<_i8.UserInfo?>.value(),
        returnValueForMissingStub: _i6.Future<_i8.UserInfo?>.value(),
      ) as _i6.Future<_i8.UserInfo?>);
}

/// A class which mocks [AuthKeyQueries].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthKeyQueries extends _i1.Mock implements _i2.AuthKeyQueries {
  @override
  _i3.Session get session => (super.noSuchMethod(
        Invocation.getter(#session),
        returnValue: _FakeSession_3(
          this,
          Invocation.getter(#session),
        ),
        returnValueForMissingStub: _FakeSession_3(
          this,
          Invocation.getter(#session),
        ),
      ) as _i3.Session);

  @override
  _i6.Future<_i8.AuthKey?> insert(_i8.AuthKey? key) => (super.noSuchMethod(
        Invocation.method(
          #insert,
          [key],
        ),
        returnValue: _i6.Future<_i8.AuthKey?>.value(),
        returnValueForMissingStub: _i6.Future<_i8.AuthKey?>.value(),
      ) as _i6.Future<_i8.AuthKey?>);

  @override
  _i6.Future<_i8.AuthKey?> getById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i6.Future<_i8.AuthKey?>.value(),
        returnValueForMissingStub: _i6.Future<_i8.AuthKey?>.value(),
      ) as _i6.Future<_i8.AuthKey?>);

  @override
  _i6.Future<_i8.AuthKey?> delete(_i8.AuthKey? key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i6.Future<_i8.AuthKey?>.value(),
        returnValueForMissingStub: _i6.Future<_i8.AuthKey?>.value(),
      ) as _i6.Future<_i8.AuthKey?>);

  @override
  _i6.Future<List<_i8.AuthKey>> getAllForUserId(int? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllForUserId,
          [userId],
        ),
        returnValue: _i6.Future<List<_i8.AuthKey>>.value(<_i8.AuthKey>[]),
        returnValueForMissingStub:
            _i6.Future<List<_i8.AuthKey>>.value(<_i8.AuthKey>[]),
      ) as _i6.Future<List<_i8.AuthKey>>);
}
